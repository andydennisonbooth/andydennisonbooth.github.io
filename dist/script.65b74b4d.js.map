{"version":3,"sources":["js/game.js","js/script.js"],"names":["Game","canvas","document","getElementById","foreground","stepHz","cellSize","seedRatio","colorMap","dead","reviving","dying","alive","cells","method","bind","init","stretch","seed","updateCells","paint","x","width","y","height","Math","random","setTimeout","requestAnimationFrame","render","offsetWidth","offsetHeight","xCells","ceil","yCells","length","push","pop","forEach","col","newCells","newCol","cell","includes","aliveNeighbors","neighborsOf","reduce","count","Number","nextState","neighbors","i","j","mod","drawCell","color","ctx","strokeStyle","fillStyle","fillRect","getContext","n","m","addEventListener","setUpRobosnek","projectDiv","removeProject","remove","fetch","then","response","json","url","iframe_url","mugshotProject","mugshotImg","querySelector","iframe","createElement","src","style","appendChild","catch"],"mappings":";AAwKA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAxKqBA,IAAAA,EAAAA,WACH,SAAA,IAAA,EAAA,KAAA,GACLC,KAAAA,OAASC,SAASC,eAAe,UACjCC,KAAAA,WAAaF,SAASC,eAAe,cAErCE,KAAAA,OAAS,GACTC,KAAAA,SAAW,GACXC,KAAAA,UAAY,GACZC,KAAAA,SAAW,CACZC,KAAM,UACNC,SAAU,UACVC,MAAO,UACPC,MAAO,WAGNC,KAAAA,MAAQ,GAEM,IAAA,IAAA,EAAA,EAAA,EAAA,CAAC,SAAU,WAA9B,EAAA,EAAA,OAAA,IAAA,CAASC,IAAAA,EAAJ,EAAA,GAA0CA,KAAAA,GAAU,KAAKA,GAAQC,KAAK,MAEtEC,KAAAA,OAqJb,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OAtIW,MAAA,WACEC,KAAAA,UACAC,KAAAA,OACAC,KAAAA,cACAC,KAAAA,UAkIb,CAAA,IAAA,OA/HW,MAAA,WACE,IAAA,IAAIC,EAAI,EAAGA,EAAI,KAAKC,MAAOD,IACvB,IAAA,IAAIE,EAAI,EAAGA,EAAI,KAAKC,OAAQD,IACzBE,KAAKC,SAAW,KAAKnB,YAAW,KAAKM,MAAMQ,GAAGE,GAAK,WA4HvE,CAAA,IAAA,SAvHa,MAAA,WAAA,IAAA,EAAA,KACAN,KAAAA,UACAE,KAAAA,cACAC,KAAAA,QACLO,WAAW,WAAMC,OAAAA,sBAAsB,EAAKC,SAAS,IAAO,KAAKxB,UAmHzE,CAAA,IAAA,UAhHc,MAAA,WACAiB,IAAAA,EAAQ,KAAKlB,WAAW0B,YACxBN,EAAS,KAAKpB,WAAW2B,aAE1B9B,KAAAA,OAAOqB,MAAQA,EACfrB,KAAAA,OAAOuB,OAASA,EAKd,IAHDQ,IAAAA,EAASP,KAAKQ,KAAKX,EAAQ,KAAKhB,UAChC4B,EAAST,KAAKQ,KAAKT,EAAS,KAAKlB,UAEhC,KAAKO,MAAMsB,OAASH,GAAanB,KAAAA,MAAMuB,KAAK,IAC5C,KAAA,KAAKvB,MAAMsB,OAASH,GAAanB,KAAAA,MAAMwB,MAEvC,OAAgBF,QAAVtB,EAAAA,KAAAA,MAAM,UAAIsB,IAAAA,OAAAA,EAAAA,EAAAA,SAAU,GAAKD,GAAtC,CAAA,IAAA,EAAmDrB,KAAAA,MAAMyB,QAAQ,SAAAC,GAAOA,OAAAA,EAAIH,KAAK,UAC1E,OAAgBD,QAAVtB,EAAAA,KAAAA,MAAM,UAAIsB,IAAAA,OAAAA,EAAAA,EAAAA,SAAU,GAAKD,GAAtC,CAAA,IAAA,EAAmDrB,KAAAA,MAAMyB,QAAQ,SAAAC,GAAOA,OAAAA,EAAIF,WAkGpF,CAAA,IAAA,cA/FkB,MAAA,WACLxB,KAAAA,MAAQ,KAAK2B,aA8F1B,CAAA,IAAA,WA3Fe,MAAA,WAEF,IADCA,IAAAA,EAAW,GACRnB,EAAI,EAAGA,EAAI,KAAKC,MAAOD,IAAK,CAI5B,IAHCkB,IAAAA,EAAM,KAAK1B,MAAMQ,GACjBoB,EAAS,GAENlB,EAAI,EAAGA,EAAI,KAAKC,OAAQD,IAAK,CAC5BmB,IAAAA,EAAOH,EAAIhB,GACXX,EAAQ,CAAC,QAAS,SAAS+B,SAASD,GAEpCE,EADYC,EAAY,KAAKhC,MAAOQ,EAAGE,GACZuB,OAAO,SAACC,EAAOL,GAASK,OAAAA,EAAQC,OAAO,CAAC,QAAS,SAASL,SAASD,KAAQ,GAExGO,OAAJ,EAEIA,EADArC,EAC+B,IAAnBgC,GAA2C,IAAnBA,EAAuB,QAAU,OAEtC,IAAnBA,EAAuB,QAAU,OAGjDH,EAAOL,KAAKa,GAGhBT,EAASJ,KAAKK,GAGb,IAAA,IAAIpB,EAAI,EAAGA,EAAI,KAAKC,MAAOD,IAGvB,IAFCkB,IAAAA,EAAMC,EAASnB,GAEZE,EAAI,EAAGA,EAAI,KAAKC,OAAQD,IAAK,CAC5BmB,IAAAA,EAAOH,EAAIhB,GAEXqB,EADYC,EAAYL,EAAUnB,EAAGE,GACVuB,OAAO,SAACC,EAAOL,GAASK,OAAAA,EAAQC,OAAO,CAAC,QAAS,SAASL,SAASD,KAAQ,GAE/F,UAATA,GAAuC,IAAnBE,GAA2C,IAAnBA,EAC5CL,EAAIhB,GAAK,QACO,SAATmB,GAAsC,IAAnBE,IAC1BL,EAAIhB,GAAK,YAKdiB,OAAAA,IAkDf,CAAA,IAAA,cA/CgBnB,MAAAA,SAAAA,EAAGE,GAEN,IADC2B,IAAAA,EAAY,GACTC,GAAK,EAAGA,GAAK,EAAGA,IAChB,IAAA,IAAIC,GAAK,EAAGA,GAAK,EAAGA,IACX,IAAND,GAAiB,IAANC,GAEfF,EAAUd,KAAK,KAAKvB,MAAMwC,EAAIhC,EAAI8B,EAAG,KAAK7B,QAAQ+B,EAAI9B,EAAI6B,EAAG,KAAK5B,UAInE0B,OAAAA,IAqCf,CAAA,IAAA,QAlCY,MAAA,WACC,IAAA,IAAI7B,EAAI,EAAGA,EAAI,KAAKC,MAAOD,IAGvB,IAFCkB,IAAAA,EAAM,KAAK1B,MAAMQ,GAEdE,EAAI,EAAGA,EAAI,KAAKC,OAAQD,IAAK,CAC5BmB,IAAAA,EAAOH,EAAIhB,GACZ+B,KAAAA,SAASjC,EAAGE,EAAG,KAAKf,SAASkC,OA4BlD,CAAA,IAAA,WAvBarB,MAAAA,SAAAA,EAAGE,EAAGgC,GACNC,KAAAA,IAAIC,YAAcF,EAClBC,KAAAA,IAAIE,UAAYH,EAChBC,KAAAA,IAAIG,SAAStC,EAAI,KAAKf,SAAUiB,EAAI,KAAKjB,SAAU,KAAKA,SAAU,KAAKA,YAoBpF,CAAA,IAAA,MAlJc,IAAA,WACC,OAAA,KAAKL,OAAO2D,WAAW,QAiJtC,CAAA,IAAA,QA9IgB,IAAA,WACD,OAAA,KAAK/C,MAAMsB,SA6I1B,CAAA,IAAA,SA1IiB,IAAA,WAAA,IAAA,EACF,OAAeA,QAAVtB,EAAAA,KAAAA,MAAM,UAAIsB,IAAAA,OAAAA,EAAAA,EAAAA,SAAU,MAyIxC,EAxKqBnC,GAwKrB,QAAA,QAAA,EAhBA,IAAM6C,EAAc,SAAChC,EAAOQ,EAAGE,GAKtB,IAL4B,IAAA,EAC3BD,EAAQT,EAAMsB,OACdX,GAAmBW,QAAVtB,EAAAA,EAAM,UAAIsB,IAAAA,OAAAA,EAAAA,EAAAA,SAAU,EAE7Be,EAAY,GACTC,GAAK,EAAGA,GAAK,EAAGA,IAChB,IAAA,IAAIC,GAAK,EAAGA,GAAK,EAAGA,IACX,IAAND,GAAiB,IAANC,GAEfF,EAAUd,KAAKvB,EAAMwC,EAAIhC,EAAI8B,EAAG7B,IAAQ+B,EAAI9B,EAAI6B,EAAG5B,KAIpD0B,OAAAA,GAGLG,EAAM,SAACQ,EAAGC,GAAMD,OAAAA,EAAI,GAAKC,EAAID,GAAKC,EAAID,EAAIC;;AChKhD,aARA,IAAA,EAAA,EAAA,QAAA,WAQA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GANA5D,SAAS6D,iBAAiB,mBAAoB,WAC1CC,KACa,IAAIhE,EAAJ,SACR6B,WAGT,IAAMmC,EAAgB,WACZC,IAAAA,EAAa/D,SAASC,eAAe,YACrC+D,EAAgB,WAAMD,OAAAA,EAAWE,UAEvCC,MAAM,uDACDC,KAAK,SAAAC,GAAYA,OAAAA,EAASC,SAC1BF,KAAK,SAAAE,GACIC,IAAAA,EAAMD,EAAKE,WAEb,GAACD,EAAD,CAKEE,IACAC,EADiBzE,SAAS0E,cAAc,YACZA,cAAc,OAE1CC,EAAS3E,SAAS4E,cAAc,UACtCD,EAAOE,IAAMP,EACbK,EAAOG,MAAM1D,MAAWqD,GAAAA,OAAAA,EAAWrD,MAAnC,MACAuD,EAAOG,MAAMxD,OAAYmD,GAAAA,OAAAA,EAAWnD,OAApC,MAEgByC,EAAWW,cAAc,YACjCK,YAAYJ,QAbhBX,MAePgB,MAAMhB","file":"script.65b74b4d.js","sourceRoot":"../src","sourcesContent":["export default class Game {\n    constructor() {\n        this.canvas = document.getElementById('canvas');\n        this.foreground = document.getElementById('foreground');\n\n        this.stepHz = 10;\n        this.cellSize = 14;\n        this.seedRatio = 0.2;\n        this.colorMap = {\n            dead: '#ffffff',\n            reviving: '#fbfbfb',\n            dying: '#f7f7f7',\n            alive: '#f3f3f3'\n        };\n\n        this.cells = [];\n\n        for (let method of ['render', 'stretch']) this[method] = this[method].bind(this);\n\n        this.init();\n    }\n\n    get ctx() {\n        return this.canvas.getContext('2d');\n    }\n\n    get width() {\n        return this.cells.length;\n    }\n\n    get height() {\n        return this.cells[0]?.length || 0;\n    }\n\n    init() {\n        this.stretch();\n        this.seed();\n        this.updateCells();\n        this.paint()\n    }\n\n    seed() {\n        for (let x = 0; x < this.width; x++) {\n            for (let y = 0; y < this.height; y++) {\n                if (Math.random() < this.seedRatio) this.cells[x][y] = 'alive';\n            }\n        }\n    }\n\n    render() {\n        this.stretch();\n        this.updateCells();\n        this.paint();\n        setTimeout(() => requestAnimationFrame(this.render), 1000 / this.stepHz);\n    }\n\n    stretch() {\n        const width = this.foreground.offsetWidth;\n        const height = this.foreground.offsetHeight;\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n\n        const xCells = Math.ceil(width / this.cellSize);\n        const yCells = Math.ceil(height / this.cellSize);\n\n        while (this.cells.length < xCells) this.cells.push([]);\n        while (this.cells.length > xCells) this.cells.pop();\n\n        while ((this.cells[0]?.length || 0) < yCells) this.cells.forEach(col => col.push('dead'));\n        while ((this.cells[0]?.length || 0) > yCells) this.cells.forEach(col => col.pop());\n    }\n\n    updateCells() {\n        this.cells = this.newCells();\n    }\n\n    newCells() {\n        const newCells = [];\n        for (let x = 0; x < this.width; x++) {\n            const col = this.cells[x];\n            const newCol = [];\n\n            for (let y = 0; y < this.height; y++) {\n                const cell = col[y];\n                const alive = ['alive', 'dying'].includes(cell);\n                const neighbors = neighborsOf(this.cells, x, y);\n                const aliveNeighbors = neighbors.reduce((count, cell) => count + Number(['alive', 'dying'].includes(cell)), 0);\n\n                let nextState;\n                if (alive) {\n                    nextState = aliveNeighbors === 2 || aliveNeighbors === 3 ? 'alive' : 'dead';\n                } else {\n                    nextState = aliveNeighbors === 3 ? 'alive' : 'dead';\n                }\n\n                newCol.push(nextState);\n            }\n\n            newCells.push(newCol);\n        }\n\n        for (let x = 0; x < this.width; x++) {\n            const col = newCells[x];\n\n            for (let y = 0; y < this.height; y++) {\n                const cell = col[y];\n                const neighbors = neighborsOf(newCells, x, y);\n                const aliveNeighbors = neighbors.reduce((count, cell) => count + Number(['alive', 'dying'].includes(cell)), 0);\n\n                if (cell === 'alive' && aliveNeighbors !== 2 && aliveNeighbors !== 3) {\n                    col[y] = 'dying';\n                } else if (cell === 'dead' && aliveNeighbors === 3) {\n                    col[y] = 'reviving';\n                }\n            }\n        }\n\n        return newCells;\n    }\n\n    neighborsOf(x, y) {\n        const neighbors = [];\n        for (let i = -1; i <= 1; i++) {\n            for (let j = -1; j <= 1; j++) {\n                if (i === 0 && j === 0) continue;\n\n                neighbors.push(this.cells[mod(x + i, this.width)][mod(y + j, this.height)]);\n            }\n        }\n\n        return neighbors;\n    }\n\n    paint() {\n        for (let x = 0; x < this.width; x++) {\n            const col = this.cells[x];\n\n            for (let y = 0; y < this.height; y++) {\n                const cell = col[y];\n                this.drawCell(x, y, this.colorMap[cell]);\n            }\n        }\n    }\n\n    drawCell(x, y, color) {\n        this.ctx.strokeStyle = color;\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(x * this.cellSize, y * this.cellSize, this.cellSize, this.cellSize);\n    }\n}\n\nconst neighborsOf = (cells, x, y) => {\n    const width = cells.length;\n    const height = cells[0]?.length || 0;\n\n    const neighbors = [];\n    for (let i = -1; i <= 1; i++) {\n        for (let j = -1; j <= 1; j++) {\n            if (i === 0 && j === 0) continue;\n\n            neighbors.push(cells[mod(x + i, width)][mod(y + j, height)]);\n        }\n    }\n\n    return neighbors;\n};\n\nconst mod = (n, m) => n < 0 ? (m + n) % m : n % m;\n","import Game from './game';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    setUpRobosnek();\n    const game = new Game();\n    game.render();\n});\n\nconst setUpRobosnek = () => {\n    const projectDiv = document.getElementById('Robosnek');\n    const removeProject = () => projectDiv.remove();\n\n    fetch('https://robosnek-ggxux3t2xa-uw.a.run.app/games/last')\n        .then(response => response.json())\n        .then(json => {\n            const url = json.iframe_url;\n\n            if (!url) {\n                removeProject();\n                return;\n            }\n\n            const mugshotProject = document.querySelector('.project');\n            const mugshotImg = mugshotProject.querySelector('img');\n\n            const iframe = document.createElement('iframe');\n            iframe.src = url;\n            iframe.style.width = `${mugshotImg.width}px`;\n            iframe.style.height = `${mugshotImg.height}px`;\n\n            const graphic = projectDiv.querySelector('.graphic');\n            graphic.appendChild(iframe);\n        })\n        .catch(removeProject);\n};\n\n"]}